// functions.scss
// all functions and mixins go here

////
 // Whole Baseline
 // This function checks to see if the font size
 // multiplied by the baseline is a whole number.
 // If not it rounds up the font size to ensure that 
 // the baseline is a whole number, therefore a whole
 // pixel. This fixes browser inconsistencies of rendering
 // sub pixels.
////

@function whole_baseline($font_size,$baseline){

	// If its a whole number
	@if( round($font_size * $baseline) == $font_size * $baseline ){
		@return percentage($font_size / 16);
	} @else {
		@return percentage(round($font_size * $baseline) / $baseline / 16);
	}
}

// Clearfix

@mixin clearfix() {
	*zoom:1;
	&:before, &:after {
	    content:"";
	    display:table;
	}
	&:after { clear:both; }
}

// Modernizr
// Call this mixin to only apply styles on supported 
// browsers anddevices.
// The ampersand pulls in the parent selector

@mixin modernizr($selector){

	#{$selector} &	{
		@content;
	}
}

// handle all units with a sensible IE fallback

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base_ie / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } }

// Grid generator

@mixin susycss($class,$cols,$total_cols){
	
	#{$class}{
		@include span-columns($cols,$total_cols);
	}

	#{$class}--omega{
		@include span-columns( $cols omega,$total_cols );
	}

	@each $breakpoint in ('m',$m), ('m_up',$m_up), ('l',$l), ('l_up',$l_up), ('xl',$xl) {
		$bp_name: nth($breakpoint, 1);
		$bp_var: nth($breakpoint, 2);

		#{$class}--#{$bp_name}{
			@include at-breakpoint( $bp_var ){
				@include span-columns( $cols,$total_cols );
			}
		}

		#{$class}--#{$bp_name}--omega{
			@include at-breakpoint( $bp_var ){
				@include span-columns( $cols omega,$total_cols );
			}
		}
	}
}


